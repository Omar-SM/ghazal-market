class CategoryNode:
    def __init__(self, data=None):
        self.data = data
        self.left = None
        self.right = None
        self.brdN=None
class Category:
    def __init__(self):
        self.root = None
        self.current = None

    def defineRoot(self, data):
        if self.root == None:
            newNode = CategoryNode(data)
            self.root = newNode
        else:
            print("Root already inserted")
    def insert(self, node, option, data):
        if node != None:
            newNode = CategoryNode(data)
            if option == "left" and node.left == None:
                node.left = newNode
            elif option == "right" and node.right == None:
                node.right = newNode
            else:
                print("Enter a valid insert commmand")
    def searchBST(self , node, data):
        if node == None:
            return False
        else:
            if node.data==data:
                self.current=node
                return True
            elif data<node.data:
                self.searchBST(node.left,data)
            else:
                self.searchBST(node.right,data)

class BrandNode:
    def __init__(self,data=None):
        self.data=data
        self.next=None
        self.proN=None
class Brand:
    def __init__(self):
        self.head=None
        self.current=None
        self.tail=None
    def searchLinkedList(self,brandName,category):
        if Category.searchBST(category)==True:
            if Category.brndN==None:
                return False
            else:
                self.current=Category.brandNode
                while self.current is not None:
                    if self.current.data==brandName:
                        return True
                    else:
                        self.current=self.current.next
        else:
            return False

    def tailmarker(self):   #this method is used to mark the tail of the list
        self.current=self.head
        while self.current is not None:
            if self.current.next is None:
                self.tail=self.current
            self.current=self.current.next
    def trav(self):
        self.current=self.head
        while self.current is not None:
            print(self.current.data)
            self.current=self.current.next
    def insert(self, data):
        n=BrandNode(data)
        if self.head is None:
            self.head =n
            self.current = n
            self.tail=n
        else:
            if self.current is None:
                self.current = self.head
                n.next = self.current.next
                self.current.next = n
                self.current = n
                if n.next is None:
                    self.tail=n
        
    def append(self,data):
        n=BrandNode(data)
        self.tailmarker()
        if self.head is None:
            self.head=n
            self.current=n
            self.tail=n
        else:
            self.tail.next = n
            self.tail = n
            self.current = n
    

class ProductNode:
    def __init__(self,data=None):
        self.data=data
        self.next=None
class Product():
    def __init__(self):
        self.head=None
        self.current=None
        self.tail=None

    def searchproduct(self,productName,brandName,category):
        if Category.searchBST(category)==True:
            if Category.brndN==None:
                return False
            else:
                if Brand.searchLinkedList(brandName,category)==True:
                    if Brand.proN==None:
                        return False
                    else:
                        self.current=Brand.proN
                        while self.current is not None:
                            if self.current.data==brandName:
                                return True
                            else:
                                self.current=self.current.next

        else:
            return False
    def tailmarker(self):   #this method is used to mark the tail of the list
        self.current=self.head
        while self.current is not None:
            if self.current.next is None:
                self.tail=self.current
            self.current=self.current.next

    def trav(self):
        self.current=self.head
        while self.current is not None:
            print(self.current.data)
            self.current=self.current.next

    def insert(self, data):
        n=ProductNode(data)
        if self.head is None:
            self.head =n
            self.current = n
            self.tail=n
        else:
            if self.current is None:
                self.current = self.head
                n.next = self.current.next
                self.current.next = n
                self.current = n
                if n.next is None:
                    self.tail=n
        
    def append(self,data):
        n=ProductNode(data)
        self.tailmarker()
        if self.head is None:
            self.head=n
            self.current=n
            self.tail=n
        else:
            self.tail.next = n
            self.tail = n
            self.current = n
class inventory:
    def __init__(self,brandName,productName,category,quantity,price):
        self.brandName=brandName
        self.productName=productName
        self.category=category
        self.quantity=quantity
        self.price=price
    def cat_root(self,category):
        if Category.root == None:
            newNode = CategoryNode(category)
            Category.root = newNode
        else:
            print("Root already inserted")
    def add_category(self,category):
        if Category.searchBST(Category.root,category)==False:
           if Category.root>category:
               Category.insert(Category.root,"left",category)
           else:
               Category.insert(Category.root,"right",category)
        else:
            return "category is already exist"
    def add_brand(self,brandName,category):
       if Category.searchBST(Category.root,category)==True:
           if Brand.searchLinkedList(brandName,category)==True:
               return"the brand is already exist"
           else:
               Brand.head=Category.brandNode
               Brand.append(brandName)
    def add_product(self,brandName,productName,category):
        if Category.searchBST(Category.root,category)==True:
            if Brand.searchLinkedList(brandName,category)==True:
               if Product.searchproduct(productName,brandName,category)==True:
                   return "product already exist"
               else:
                   Product.head=Brand.proN
                   print("enter price and quantity :")
                   x=int(input())
                   y=int(input())
                   data={'product':productName,'brand':brandName,'category':category,'quantity':y,'price':x}
                   Product.append(data)


